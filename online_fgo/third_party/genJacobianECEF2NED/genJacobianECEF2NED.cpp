//
// File: genJacobianECEF2NED.cpp
//
// MATLAB Coder version            : 5.6
// C/C++ source code generated on  : 07-Jan-2024 18:19:56
//

// Include Files
#include "genJacobianECEF2NED.h"
#include "rt_nonfinite.h"
#include <cmath>

// Function Declarations
static double rt_hypotd_snf(double u0, double u1);

static double rt_powd_snf(double u0, double u1);

// Function Definitions
//
// Arguments    : double u0
//                double u1
// Return Type  : double
//
static double rt_hypotd_snf(double u0, double u1)
{
  double a;
  double b;
  double y;
  a = std::abs(u0);
  b = std::abs(u1);
  if (a < b) {
    a /= b;
    y = b * std::sqrt(a * a + 1.0);
  } else if (a > b) {
    b /= a;
    y = a * std::sqrt(b * b + 1.0);
  } else if (std::isnan(b)) {
    y = rtNaN;
  } else {
    y = a * 1.4142135623730951;
  }
  return y;
}

//
// Arguments    : double u0
//                double u1
// Return Type  : double
//
static double rt_powd_snf(double u0, double u1)
{
  double y;
  if (std::isnan(u0) || std::isnan(u1)) {
    y = rtNaN;
  } else {
    double d;
    double d1;
    d = std::abs(u0);
    d1 = std::abs(u1);
    if (std::isinf(u1)) {
      if (d == 1.0) {
        y = 1.0;
      } else if (d > 1.0) {
        if (u1 > 0.0) {
          y = rtInf;
        } else {
          y = 0.0;
        }
      } else if (u1 > 0.0) {
        y = 0.0;
      } else {
        y = rtInf;
      }
    } else if (d1 == 0.0) {
      y = 1.0;
    } else if (d1 == 1.0) {
      if (u1 > 0.0) {
        y = u0;
      } else {
        y = 1.0 / u0;
      }
    } else if (u1 == 2.0) {
      y = u0 * u0;
    } else if ((u1 == 0.5) && (u0 >= 0.0)) {
      y = std::sqrt(u0);
    } else if ((u0 < 0.0) && (u1 > std::floor(u1))) {
      y = rtNaN;
    } else {
      y = std::pow(u0, u1);
    }
  }
  return y;
}

//
// genJacobianECEF2NED
//     genJacobianECEF2NED = genJacobianECEF2NED(X,XREF,Y,YREF,Z,ZREF)
//
// Arguments    : double x
//                double xref
//                double y
//                double yref
//                double z
//                double zref
//                creal_T b_genJacobianECEF2NED[18]
// Return Type  : void
//
void genJacobianECEF2NED(double x, double xref, double y, double yref, double z,
                         double zref, creal_T b_genJacobianECEF2NED[18])
{
  double absxi;
  double absxr;
  double ar;
  double b_xref_re_tmp;
  double b_yref_re_tmp;
  double t10;
  double t103;
  double t105;
  double t109;
  double t11;
  double t117_tmp;
  double t127;
  double t135;
  double t139;
  double t19;
  double t202;
  double t212_im;
  double t21_im;
  double t21_re;
  double t24;
  double t25;
  double t27_im;
  double t27_re;
  double t28;
  double t29;
  double t30;
  double t31;
  double t32;
  double t33;
  double t34;
  double t35_tmp;
  double t38_im;
  double t38_re;
  double t39_im;
  double t39_re;
  double t42;
  double t45;
  double t46;
  double t47;
  double t49;
  double t63_im;
  double t63_re;
  double t74_tmp;
  double t75;
  double t77;
  double t78;
  double t84;
  double xref_im;
  double xref_im_tmp;
  double xref_re_tmp;
  double yi;
  double yr;
  double yref_im_tmp;
  double yref_re_tmp;
  //     This function was generated by the Symbolic Math Toolbox version 9.3.
  //     07-Jan-2024 18:18:03
  t10 = zref * zref;
  t11 = t10 * t10;
  t19 = xref * xref + yref * yref;
  t42 = t10 * 0.99330562000985867;
  t24 = t19 * t19;
  t25 = 1.0 / t19;
  t28 = std::sqrt(t19);
  t39_re = (yref - xref * 0.0) + yref;
  t39_im = xref - xref;
  t45 = (t19 + t42) - 1.82309125845465E+9;
  t27_re = xref - yref * 0.0;
  t29 = 1.0 / rt_hypotd_snf(xref, yref);
  t31 = 1.0 / t28;
  t46 = 1.0 / (t45 * t45);
  t47 = 1.0 / rt_powd_snf(t45, 3.0);
  t30 = t29 * t29;
  t32 = rt_powd_snf(t31, 3.0);
  t33 = t29 * x;
  t34 = t31 * xref;
  t35_tmp = t31 * yref;
  t38_re = xref + t27_re;
  t38_im = yref - yref;
  t49 = rt_powd_snf(t46, 3.0);
  yi = xref * t27_re - yref * -yref;
  t109 = xref * -yref + yref * t27_re;
  if (t109 == 0.0) {
    if (yi < 0.0) {
      yr = 0.0;
      yi = std::sqrt(-yi);
    } else {
      yr = std::sqrt(yi);
      yi = 0.0;
    }
  } else if (yi == 0.0) {
    if (t109 < 0.0) {
      yr = std::sqrt(-t109 / 2.0);
      yi = -yr;
    } else {
      yr = std::sqrt(t109 / 2.0);
      yi = yr;
    }
  } else if (std::isnan(yi)) {
    yr = rtNaN;
    yi = rtNaN;
  } else if (std::isnan(t109)) {
    yr = rtNaN;
    yi = rtNaN;
  } else if (std::isinf(t109)) {
    yr = std::abs(t109);
    yi = t109;
  } else if (std::isinf(yi)) {
    if (yi < 0.0) {
      yr = 0.0;
      yi = t109 * -yi;
    } else {
      yr = yi;
      yi = 0.0;
    }
  } else {
    absxr = std::abs(yi);
    absxi = std::abs(t109);
    if ((absxr > 4.4942328371557893E+307) ||
        (absxi > 4.4942328371557893E+307)) {
      absxr *= 0.5;
      yr = rt_hypotd_snf(absxr, absxi * 0.5);
      if (yr > absxr) {
        yr = std::sqrt(yr) * std::sqrt(absxr / yr + 1.0);
      } else {
        yr = std::sqrt(yr) * 1.4142135623730951;
      }
    } else {
      yr = std::sqrt((rt_hypotd_snf(absxr, absxi) + absxr) * 0.5);
    }
    if (yi > 0.0) {
      yi = 0.5 * (t109 / yr);
    } else {
      if (t109 < 0.0) {
        yi = -yr;
      } else {
        yi = yr;
      }
      yr = 0.5 * (t109 / yi);
    }
  }
  if (yi == 0.0) {
    t27_re = 1.0 / yr;
    t27_im = 0.0;
  } else if (yr == 0.0) {
    t27_re = 0.0;
    t27_im = -(1.0 / yi);
  } else {
    absxr = std::abs(yr);
    absxi = std::abs(yi);
    if (absxr > absxi) {
      absxi = yi / yr;
      yr += absxi * yi;
      t27_re = (absxi * 0.0 + 1.0) / yr;
      t27_im = (0.0 - absxi) / yr;
    } else if (absxi == absxr) {
      if (yr > 0.0) {
        yr = 0.5;
      } else {
        yr = -0.5;
      }
      if (yi > 0.0) {
        absxi = 0.5;
      } else {
        absxi = -0.5;
      }
      t27_re = (yr + 0.0 * absxi) / absxr;
      t27_im = (0.0 * yr - absxi) / absxr;
    } else {
      absxi = yr / yi;
      yr = yi + absxi * yr;
      t27_re = absxi / yr;
      t27_im = (absxi * 0.0 - 1.0) / yr;
    }
  }
  yref_re_tmp = yref * t30;
  absxr = yref_re_tmp * t39_re;
  yref_im_tmp = yref_re_tmp * t39_im;
  b_yref_re_tmp = absxr * t27_re - yref_im_tmp * t27_im;
  yref_im_tmp = absxr * t27_im + yref_im_tmp * t27_re;
  ar = b_yref_re_tmp * x;
  t103 = yref_im_tmp * x;
  if (t103 == 0.0) {
    t77 = ar / 2.0;
    absxr = 0.0;
  } else if (ar == 0.0) {
    t77 = 0.0;
    absxr = t103 / 2.0;
  } else {
    t77 = ar / 2.0;
    absxr = t103 / 2.0;
  }
  xref_re_tmp = -xref * t30;
  ar = xref_re_tmp * t39_re;
  xref_im_tmp = xref_re_tmp * t39_im;
  b_xref_re_tmp = ar * t27_re - xref_im_tmp * t27_im;
  xref_im_tmp = ar * t27_im + xref_im_tmp * t27_re;
  ar = b_xref_re_tmp * y;
  t103 = xref_im_tmp * y;
  if (t103 == 0.0) {
    t84 = ar / 2.0;
    xref_im = 0.0;
  } else if (ar == 0.0) {
    t84 = 0.0;
    xref_im = t103 / 2.0;
  } else {
    t84 = ar / 2.0;
    xref_im = t103 / 2.0;
  }
  t63_re = (-t33 + t77) + t84;
  t63_im = absxr + xref_im;
  ar = t10 * t19;
  t74_tmp = ar * t47;
  absxr = t11 * t24;
  absxi = std::sqrt(t74_tmp * 1.955757732086153E+11 +
                    absxr * t49 * 9.5624707665369319E+21);
  t75 = 1.0 / absxi;
  t77 = rt_powd_snf((t74_tmp * 9.7787886604307648E+10 + absxi) + 1.0,
                    0.33333333333333331);
  t78 = 1.0 / t77;
  t212_im = t10 * t47;
  absxi = t212_im * xref;
  t30 = ar * (t46 * t46);
  yr = t30 * xref;
  yi = t11 * t19 * t49;
  t109 = absxr * (1.0 / rt_powd_snf(t45, 7.0));
  t19 = (absxi * 1.955757732086153E+11 - yr * 5.86727319625846E+11) +
        t75 *
            (((absxi * 3.9115154641723059E+11 - yr * 1.1734546392516919E+12) +
              yi * xref * 3.8249883066147728E+22) -
             t109 * xref * 1.1474964919844321E+23) /
            2.0;
  absxr = t212_im * yref;
  absxi = t30 * yref;
  t109 =
      (absxr * 1.955757732086153E+11 - absxi * 5.86727319625846E+11) +
      t75 *
          (((absxr * 3.9115154641723059E+11 - absxi * 1.1734546392516919E+12) +
            yi * yref * 3.8249883066147728E+22) -
           t109 * yref * 1.1474964919844321E+23) /
          2.0;
  yr = t78 * t78;
  absxi = (t77 + t78) + 4.0;
  absxr = yr * yr;
  t84 = 1.0 / (absxi * absxi);
  t77 = 1.0 / rt_powd_snf(absxi, 3.0);
  yi = t10 * t46;
  t45 = yi * t84;
  t21_re = t45 * 1.955757732086153E+11;
  absxi = std::sqrt(t21_re + 1.0);
  t127 = yr * t19 / 3.0 - absxr * t19 / 3.0;
  t49 = yr * t109 / 3.0 - absxr * t109 / 3.0;
  t109 = 1.0 / absxi;
  t103 = rt_powd_snf(t109, 3.0);
  t105 = 1.0 / (absxi + 1.0);
  absxr = t212_im * t84;
  absxi = yi * t77;
  t19 = absxr * xref * 7.8230309283446118E+11 +
        absxi * t127 * 3.9115154641723059E+11;
  t139 = absxr * yref * 7.8230309283446118E+11 +
         absxi * t49 * 3.9115154641723059E+11;
  yi = t105 * t105;
  absxi = t10 * t28;
  t117_tmp = absxi * t47 * t84 * t105;
  absxi *= t46;
  t202 = absxi * t77 * t105;
  t75 = absxi * t84;
  t21_im = t75 * t109 * yi;
  absxi = ar * t46;
  absxr = t11 * t46;
  yr = absxr * t84;
  t30 = std::sqrt(
      ((-(absxi * t84 * 1.09102409957035E+15) + t109 * 2.03403157953845E+13) -
       yr * t109 * t105 * 2.16744073933885E+15) +
      2.03403157953845E+13);
  t135 = 1.0 / t30;
  t74_tmp *= t84;
  t212_im = t11 * t47 * t84 * t109 * t105;
  t78 = absxi * t77;
  t77 = absxr * t77 * t109 * t105;
  t109 = yr * (1.0 / (t21_re + 1.0)) * yi;
  yi = yr * t103 * t105;
  t28 =
      (t28 + t75 * t105 * 9.7787886604307648E+10) - t30 * 0.0066943799901413156;
  t34 = ((((t34 - t117_tmp * xref * 3.9115154641723059E+11) +
           t10 * t34 * t46 * t84 * t105 * 9.7787886604307648E+10) -
          t202 * t127 * 1.955757732086153E+11) +
         t21_im * t19 * 4.8893943302153816E+10) -
        t135 *
            (((((((-(t45 * xref * 2.182048199140701E+15) +
                   t74_tmp * xref * 4.364096398281402E+15) +
                  t212_im * xref * 8.669762957355398E+15) +
                 t78 * t127 * 2.182048199140701E+15) +
                t77 * t127 * 4.334881478677699E+15) +
               t103 * t19 * 1.017015789769225E+13) -
              t109 * t19 * 1.083720369669425E+15) -
             yi * t19 * 1.083720369669425E+15) *
            0.0033471899950706578;
  absxi = 1.0 / std::sqrt(t42 + t28 * t28);
  t11 = rt_powd_snf(absxi, 3.0);
  t42 = absxi * zref * 42697.672707179969 + zref;
  yr = t42 * t42;
  absxi = 1.0 / t24 * yr;
  absxr = t25 * t28 * t11 * t42;
  t47 = absxi * xref * 2.0 + absxr * t34 * zref * 85395.345414359923;
  t117_tmp = ((((t35_tmp - t117_tmp * yref * 3.9115154641723059E+11) +
                t10 * t35_tmp * t46 * t84 * t105 * 9.7787886604307648E+10) -
               t202 * t49 * 1.955757732086153E+11) +
              t21_im * t139 * 4.8893943302153816E+10) -
             t135 *
                 (((((((-(t45 * yref * 2.182048199140701E+15) +
                        t74_tmp * yref * 4.364096398281402E+15) +
                       t212_im * yref * 8.669762957355398E+15) +
                      t78 * t49 * 2.182048199140701E+15) +
                     t77 * t49 * 4.334881478677699E+15) +
                    t103 * t139 * 1.017015789769225E+13) -
                   t109 * t139 * 1.083720369669425E+15) -
                  yi * t139 * 1.083720369669425E+15) *
                 0.0033471899950706578;
  t202 = absxi * yref * 2.0 + absxr * zref * t117_tmp * 85395.345414359923;
  t105 = 1.0 / std::sqrt(t25 * yr + 1.0);
  t139 = rt_powd_snf(t105, 3.0);
  t78 = t29 * t105 * y;
  ar = t105 * b_yref_re_tmp * y;
  t103 = t105 * yref_im_tmp * y;
  if (t103 == 0.0) {
    t21_re = ar / 2.0;
    t21_im = 0.0;
  } else if (ar == 0.0) {
    t21_re = 0.0;
    t21_im = t103 / 2.0;
  } else {
    t21_re = ar / 2.0;
    t21_im = t103 / 2.0;
  }
  t127 = -xref * t33 * t139;
  t77 = t127 * t202 / 2.0;
  ar = t105 * b_xref_re_tmp * x;
  t103 = t105 * xref_im_tmp * x;
  if (t103 == 0.0) {
    t84 = ar / 2.0;
    xref_im = 0.0;
  } else if (ar == 0.0) {
    t84 = 0.0;
    xref_im = t103 / 2.0;
  } else {
    t84 = ar / 2.0;
    xref_im = t103 / 2.0;
  }
  absxr = t31 * t42;
  absxi = yref * t29;
  t49 = absxi * t139;
  t74_tmp = absxr * t139;
  t45 = t32 * t42 * t105;
  t135 = t31 * t28 * t11 * t105;
  t19 = ((((((-t78 + t21_re) - t84) + t45 * yref * z) +
           t135 * z * zref * t117_tmp * 42697.672707179969) -
          t49 * t202 * y / 2.0) +
         t77) +
        t74_tmp * t202 * z * -0.5;
  t212_im = t21_im - xref_im;
  ar = xref_re_tmp * t31;
  t84 = ar * t39_re;
  xref_im = ar * t39_im;
  t109 = yref * t32 * t42 * t78;
  t75 = -xref * t31 * t33;
  t30 = -xref * t32 * -t33 * t42 * t105;
  yi = absxi * t31 * t42 * t139;
  yr = t35_tmp * t28 * t11 * t78;
  absxi = t75 * t28 * t11 * t105;
  t21_re = ((((((((absxr * -t78 + t109 * yref) + t30 * yref) + absxr * t21_re) +
                x * (t105 * (t42 * (t84 * t27_re - xref_im * t27_im))) * -0.5) +
               yr * zref * t117_tmp * 42697.672707179969) +
              absxi * zref * t117_tmp * -42697.672707179969) +
             t139 * t202 * z / 2.0) +
            yi * t202 * y * -0.5) +
           absxr * t77;
  t21_im = absxr * t21_im +
           x * (t105 * (t42 * (t84 * t27_im + xref_im * t27_re))) * -0.5;
  t84 = ar * t38_re;
  xref_im = ar * t38_im;
  ar = t105 * (t42 * (t84 * t27_re - xref_im * t27_im)) * x;
  t103 = t105 * (t42 * (t84 * t27_im + xref_im * t27_re)) * x;
  if (t103 == 0.0) {
    t84 = ar / 2.0;
    xref_im = 0.0;
  } else if (ar == 0.0) {
    t84 = 0.0;
    xref_im = t103 / 2.0;
  } else {
    t84 = ar / 2.0;
    xref_im = t103 / 2.0;
  }
  absxr = yref_re_tmp * t31;
  t77 = absxr * t38_re;
  absxr *= t38_im;
  ar = t105 * (t42 * (t77 * t27_re - absxr * t27_im)) * y;
  t103 = t105 * (t42 * (t77 * t27_im + absxr * t27_re)) * y;
  if (t103 == 0.0) {
    t77 = ar / 2.0;
    absxr = 0.0;
  } else if (ar == 0.0) {
    t77 = 0.0;
    absxr = t103 / 2.0;
  } else {
    t77 = ar / 2.0;
    absxr = t103 / 2.0;
  }
  b_genJacobianECEF2NED[0].re =
      ((((((((t139 * t47 * z / 2.0 + t31 * -t33 * t42 * t105) + t109 * xref) +
            t75 * t42 * t139 * t47 / 2.0) +
           t30 * xref) -
          yi * t47 * y / 2.0) +
         yr * t34 * zref * 42697.672707179969) -
        t84) +
       t77) +
      absxi * t34 * zref * -42697.672707179969;
  b_genJacobianECEF2NED[0].im = (0.0 - xref_im) + absxr;
  absxr = yref_re_tmp * t38_re;
  yref_im_tmp = yref_re_tmp * t38_im;
  yref_re_tmp = absxr * t27_re - yref_im_tmp * t27_im;
  yref_im_tmp = absxr * t27_im + yref_im_tmp * t27_re;
  ar = yref_re_tmp * x;
  t103 = yref_im_tmp * x;
  if (t103 == 0.0) {
    t77 = ar / 2.0;
    absxr = 0.0;
  } else if (ar == 0.0) {
    t77 = 0.0;
    absxr = t103 / 2.0;
  } else {
    t77 = ar / 2.0;
    absxr = t103 / 2.0;
  }
  ar = xref_re_tmp * t38_re;
  xref_im_tmp = xref_re_tmp * t38_im;
  xref_re_tmp = ar * t27_re - xref_im_tmp * t27_im;
  xref_im_tmp = ar * t27_im + xref_im_tmp * t27_re;
  ar = xref_re_tmp * y;
  t103 = xref_im_tmp * y;
  if (t103 == 0.0) {
    t84 = ar / 2.0;
    xref_im = 0.0;
  } else if (ar == 0.0) {
    t84 = 0.0;
    xref_im = t103 / 2.0;
  } else {
    t84 = ar / 2.0;
    xref_im = t103 / 2.0;
  }
  b_genJacobianECEF2NED[1].re = (t29 * y + t77) + t84;
  b_genJacobianECEF2NED[1].im = absxr + xref_im;
  ar = t105 * xref_re_tmp * x;
  t103 = t105 * xref_im_tmp * x;
  if (t103 == 0.0) {
    t84 = ar / 2.0;
    xref_im = 0.0;
  } else if (ar == 0.0) {
    t84 = 0.0;
    xref_im = t103 / 2.0;
  } else {
    t84 = ar / 2.0;
    xref_im = t103 / 2.0;
  }
  ar = t105 * yref_re_tmp * y;
  t103 = t105 * yref_im_tmp * y;
  if (t103 == 0.0) {
    t77 = ar / 2.0;
    absxr = 0.0;
  } else if (ar == 0.0) {
    t77 = 0.0;
    absxr = t103 / 2.0;
  } else {
    t77 = ar / 2.0;
    absxr = t103 / 2.0;
  }
  b_genJacobianECEF2NED[2].re =
      ((((((-t33 * t105 + t127 * t47 / 2.0) - t49 * t47 * y / 2.0) -
          t74_tmp * t47 * z / 2.0) +
         t45 * xref * z) -
        t84) +
       t77) +
      t135 * t34 * z * zref * 42697.672707179969;
  b_genJacobianECEF2NED[2].im = (0.0 - xref_im) + absxr;
  b_genJacobianECEF2NED[3].re = t21_re;
  b_genJacobianECEF2NED[3].im = t21_im;
  b_genJacobianECEF2NED[4].re = t63_re;
  b_genJacobianECEF2NED[4].im = t63_im;
  b_genJacobianECEF2NED[5].re = t19;
  b_genJacobianECEF2NED[5].im = t212_im;
  b_genJacobianECEF2NED[6].re = t21_re;
  b_genJacobianECEF2NED[6].im = t21_im;
  b_genJacobianECEF2NED[7].re = t63_re;
  b_genJacobianECEF2NED[7].im = t63_im;
  b_genJacobianECEF2NED[8].re = t19;
  b_genJacobianECEF2NED[8].im = t212_im;
  yr = -xref * t29;
  b_genJacobianECEF2NED[9].re = yr * t31 * t42 * t105;
  b_genJacobianECEF2NED[9].im = 0.0;
  absxi = -yref * t29;
  b_genJacobianECEF2NED[10].re = absxi;
  b_genJacobianECEF2NED[10].im = 0.0;
  b_genJacobianECEF2NED[11].re = yr * t105;
  b_genJacobianECEF2NED[11].im = 0.0;
  b_genJacobianECEF2NED[12].re = absxi * t31 * t42 * t105;
  b_genJacobianECEF2NED[12].im = 0.0;
  b_genJacobianECEF2NED[13].re = xref * t29;
  b_genJacobianECEF2NED[13].im = 0.0;
  b_genJacobianECEF2NED[14].re = absxi * t105;
  b_genJacobianECEF2NED[14].im = 0.0;
  b_genJacobianECEF2NED[15].re = t105;
  b_genJacobianECEF2NED[15].im = 0.0;
  b_genJacobianECEF2NED[16].re = 0.0;
  b_genJacobianECEF2NED[16].im = 0.0;
  b_genJacobianECEF2NED[17].re = -t31 * t42 * t105;
  b_genJacobianECEF2NED[17].im = 0.0;
}

//
// File trailer for genJacobianECEF2NED.cpp
//
// [EOF]
//
